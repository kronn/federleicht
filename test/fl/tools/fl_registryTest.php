<?php
// Call fl_registryTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
	define('PHPUnit_MAIN_METHOD', 'fl_registryTest::main');
}

if ( !defined('FL_ABSPATH') ) {
	$abspath = realpath(dirname(__FILE__) . '/../../../');
	define('FL_ABSPATH', $abspath . '/');
}

require_once 'PHPUnit/Framework.php';

require_once FL_ABSPATH . 'fl/tools/registry.php';

/**
 * Test class for fl_registry.
 * Generated by PHPUnit on 2008-04-29 at 21:49:16.
 */
class fl_registryTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var	fl_registry
	 * @access protected
	 */
	protected $object;

	/**
	 * Runs the test methods of this class.
	 *
	 * @access public
	 * @static
	 */
	public static function main()
	{
		require_once 'PHPUnit/TextUI/TestRunner.php';

		$suite  = new PHPUnit_Framework_TestSuite('fl_registryTest');
		$result = PHPUnit_TextUI_TestRunner::run($suite);
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp()
	{
		$this->object = fl_registry::getInstance();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown() {
	}

	public function testIsSingleton() {
		$firstRegistry  = $this->object;
		$secondRegistry = fl_registry::getInstance();

		$this->assertEquals($firstRegistry, $secondRegistry);
	}

	public function testValuesCanBeSavedAndLoaded() {
		$this->object->set('now', time() );
		$this->object->set('testString', "ein kleiner Teststring");

		$time = $this->object->get('now');
		$string = $this->object->get('testString');

		$this->assertTrue( is_numeric($time) );
		$this->assertTrue( is_string($string) );
		$this->assertTrue( $string === "ein kleiner Teststring" );
	}

	public function testTestingForSetKeysPossible() {
		$key = 'RegistryKey';
		$value = 'some Value';

		$this->assertFalse($this->object->is_set($key));

		$this->object->set($key, $value);

		$this->assertTrue($this->object->is_set($key));
	}

	public function testUnknownKeysReturnFalse() {
		$key = 'unknkownKey';
		
		$this->assertFalse($this->object->get($key));
	}

	/**
	 * @todo implement Test "Values can be of certain type"
	 */
	public function testValuesCanBeOfCertainType() {
		$this->markTestIncomplete(
		  'This test has not been implemented yet.'
		);
	}
}

// Call fl_registryTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'fl_registryTest::main') {
	fl_registryTest::main();
}
?>
