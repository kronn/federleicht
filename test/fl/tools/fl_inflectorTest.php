<?php
// Call fl_inflectorTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
	define('PHPUnit_MAIN_METHOD', 'fl_inflectorTest::main');
}

if ( !defined('FL_ABSPATH') ) {
	$abspath = realpath(dirname(__FILE__) . '/../../../');
	define('FL_ABSPATH', $abspath . '/');
}

require_once 'PHPUnit/Framework.php';

require_once FL_ABSPATH . 'fl/tools/inflector.php';

/**
 * Test class for fl_inflector.
 * Generated by PHPUnit on 2008-04-29 at 21:49:01.
 */
class fl_inflectorTest extends PHPUnit_Framework_TestCase {
	protected $object;
	public static function main() {
		require_once 'PHPUnit/TextUI/TestRunner.php';

		$suite  = new PHPUnit_Framework_TestSuite('fl_inflectorTest');
		$result = PHPUnit_TextUI_TestRunner::run($suite);
	}
	protected function setUp() {
		$definitions = array(
			'plural' => array(
				'/^([a-z]*)(ung|heit|schaft|ion|stik)$/i'=>'\1\2en',
				'/^([a-z]*)([ei])(ld)$/i'=>'\1\2\3er',
				'/^([a-z]*)([auo])(ld|ch|nd)$/i'=>'\1\2e\3er',
				'/^([a-z]*[^aoieukgh])$/i' =>'\1e',
			),

			'singular' => array(
				'/^([a-z]*)(ung|heit|schaft|ion|stik)en$/i'=>'\1\2',
				'/^([a-z]*)([ei])(ld)er$/i'=>'\1\2\3',
				'/^([a-z]*)([auo])e(ld|ch|nd)er$/i'=>'\1\2\3',
				'/^([a-z]*)e/i' => '\1',
			),

			'uncountable' => array(
				'audio',
				'daten', 
				'bankdaten', 
				'cover',
				'musiktitel',
				'titel',
				'merchandise',
				'poster',
				'kleidung'
			),

			'irregular' => array(
				'account' => 'accounts',
				'land' => 'laender',
				'beat' => 'beats',
				'album' => 'alben',
				'album_titel' => 'alben_titel',
				'genre' => 'genres',
				'hoerprobe' => 'hoerproben'
			)
		);
		$this->object = new fl_inflector($definitions);
	}
	protected function tearDown() {
	}

	public function testPlural() {
		$this->assertEquals('Buecher', $this->object->plural('Buch'));
		$this->assertEquals('Produkte', $this->object->plural('Produkt'));
	}
	public function testSingular() {
		$this->assertEquals('Buch', $this->object->singular('Buecher'));
		$this->assertEquals('Produkt', $this->object->singular('Produkte'));
	}

	public function testIs_singular() {
		$this->assertTrue($this->object->is_singular('genre'), 'Genre ist Singular');
	}
	public function testIs_singular2() {
		$this->assertTrue($this->object->is_singular('merchandise'));
	}
	public function testIs_singular3() {
		$word = 'waelder';

		$this->assertGreaterThan(0, preg_match('/^([a-z]*)([ei])(ld)er$/i', $word));
		$this->assertFalse($this->object->is_singular($word), $this->object);
	}
	public function testIs_singular4() {
		$word = 'hoerprobe';

		$this->assertEquals(0, preg_match('/^([a-z]*)(probe)n$/i', $word));
		$this->assertGreaterThan(0, preg_match('/^([a-z]*)(probe)$/i', $word));
		$this->assertTrue($this->object->is_singular($word), $this->object);
	}
	public function testIs_singular5() {
		$this->assertFalse($this->object->is_singular('genres'), 'Genres ist nicht Singular');
	}
	public function testIs_singular6() {
		$this->assertTrue($this->object->is_singular('bild'), 'Bild ist Singular');
	}
	public function testIs_singular7() {
		$this->assertFalse($this->object->is_singular('hoerproben'), $this->object);
	}
	public function testStatistik() {
		$this->assertTrue($this->object->is_singular('statistik'));
	}
	public function testAlben() {
		$this->assertFalse($this->object->is_singular('alben'));
		$this->assertTrue($this->object->is_singular('album'));
	}
	public function testAlbenTitel() {
		$this->assertFalse($this->object->is_singular('alben_titel'));
		$this->assertTrue($this->object->is_singular('album_titel'));
		$this->assertEquals('alben_titel', $this->object->plural('album_titel'), $this->object);
	}
}

// Call fl_inflectorTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'fl_inflectorTest::main') {
	fl_inflectorTest::main();
}
?>
