<?php
// Call fl_inflectorTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
	define('PHPUnit_MAIN_METHOD', 'fl_inflectorTest::main');
}

if ( !defined('ABSPATH') ) {
	$abspath = realpath(dirname(__FILE__) . '/../../../');
	define('ABSPATH', $abspath . '/');
}

require_once 'PHPUnit/Framework.php';

require_once ABSPATH . 'fl/tools/inflector.php';

/**
 * Test class for fl_inflector.
 * Generated by PHPUnit on 2008-04-29 at 21:49:01.
 */
class fl_inflectorTest extends PHPUnit_Framework_TestCase {
	protected $object;
	public static function main() {
		require_once 'PHPUnit/TextUI/TestRunner.php';

		$suite  = new PHPUnit_Framework_TestSuite('fl_inflectorTest');
		$result = PHPUnit_TextUI_TestRunner::run($suite);
	}
	protected function setUp() {
		$this->object = new fl_inflector();
	}
	protected function tearDown()
	{
	}

	public function testPlural() {
		$this->assertEquals('Mice', $this->object->plural('Mouse'));
		$this->assertEquals('Messages', $this->object->plural('Message'));
		$this->assertEquals('Queries', $this->object->plural('Query'));
	}
	public function testSingular() {
		$this->assertEquals('Mouse', $this->object->singular('Mice'));
		$this->assertEquals('Message', $this->object->singular('Messages'));
		$this->assertEquals('Query', $this->object->singular('Queries'));
	}

	public function testIs_singular() {
		$inflector = new fl_inflector('de');

		$this->assertTrue($inflector->is_singular('genre'), 'Genre ist Singular');
	}
	public function testIs_singular2() {
		$inflector = new fl_inflector('de');

		$this->assertTrue($inflector->is_singular('merchandise'));
	}
	public function testIs_singular3() {
		$inflector = new fl_inflector('de');
		$word = 'waelder';

		$this->assertGreaterThan(0, preg_match('/^([a-z]*)([ei])(ld)er$/i', $word));
		$this->assertFalse($inflector->is_singular($word), $inflector);
	}
	public function testIs_singular4() {
		$inflector = new fl_inflector('de');
		$word = 'hoerprobe';

		$this->assertEquals(0, preg_match('/^([a-z]*)(probe)n$/i', $word));
		$this->assertGreaterThan(0, preg_match('/^([a-z]*)(probe)$/i', $word));
		$this->assertTrue($inflector->is_singular($word), $inflector);
	}
	public function testIs_singular5() {
		$inflector = new fl_inflector('de');

		$this->assertFalse($inflector->is_singular('genres'), 'Genres ist nicht Singular');
	}
	public function testIs_singular6() {
		$inflector = new fl_inflector('de');

		$this->assertTrue($inflector->is_singular('bild'), 'Bild ist Singular');
	}
	public function testIs_singular7() {
		$inflector = new fl_inflector('de');

		$this->assertFalse($inflector->is_singular('hoerproben'), $inflector);
	}
}

// Call fl_inflectorTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'fl_inflectorTest::main') {
	fl_inflectorTest::main();
}
?>
